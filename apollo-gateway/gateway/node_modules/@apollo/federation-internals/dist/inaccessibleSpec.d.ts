import { CorePurpose, FeatureDefinition, FeatureDefinitions, FeatureVersion } from "@apollo/federation-internals/src/coreSpec";
import { DirectiveDefinition, Schema } from "@apollo/federation-internals/src/definitions";
import { GraphQLError, DirectiveLocation } from "graphql";
import { DirectiveSpecification } from "@apollo/federation-internals/src/directiveAndTypeSpecification";
export declare const inaccessibleIdentity = "https://specs.apollo.dev/inaccessible";
export declare class InaccessibleSpecDefinition extends FeatureDefinition {
    readonly inaccessibleLocations: DirectiveLocation[];
    readonly inaccessibleDirectiveSpec: DirectiveSpecification;
    private readonly printedInaccessibleDefinition;
    constructor(version: FeatureVersion);
    isV01(): boolean;
    addElementsToSchema(schema: Schema): GraphQLError[];
    inaccessibleDirective(schema: Schema): DirectiveDefinition<Record<string, never>> | undefined;
    checkCompatibleDirective(definition: DirectiveDefinition): GraphQLError | undefined;
    allElementNames(): string[];
    get defaultCorePurpose(): CorePurpose | undefined;
}
export declare const INACCESSIBLE_VERSIONS: FeatureDefinitions<InaccessibleSpecDefinition>;
export declare function removeInaccessibleElements(schema: Schema): void;
//# sourceMappingURL=inaccessibleSpec.d.ts.map