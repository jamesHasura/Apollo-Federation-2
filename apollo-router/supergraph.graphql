schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Category
  @join__type(graph: PRODUCTS)
{
  id: ID!
  title: String!
}

"""ordering argument of a cursor"""
enum cursor_ordering
  @join__type(graph: USERS)
{
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp
  @join__type(graph: USERS)
{
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar join__FieldSet

enum join__Graph {
  LOCATIONS @join__graph(name: "locations", url: "https://flyby-locations-sub.herokuapp.com/")
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4001/")
  REVIEWS @join__graph(name: "reviews", url: "https://flyby-reviews-sub.herokuapp.com/")
  USERS @join__graph(name: "users", url: "http://localhost:8080/v1/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Location
  @join__type(graph: LOCATIONS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
{
  id: ID!

  """The name of the location"""
  name: String! @join__field(graph: LOCATIONS)

  """A short description about the location"""
  description: String! @join__field(graph: LOCATIONS)

  """The location's main photo as a URL"""
  photo: String! @join__field(graph: LOCATIONS)

  """The calculated overall rating based on all reviews"""
  overallRating: Float @join__field(graph: REVIEWS)

  """All submitted reviews about this location"""
  reviewsForLocation: [Review]! @join__field(graph: REVIEWS)
}

input LocationReviewInput
  @join__type(graph: REVIEWS)
{
  """Written text"""
  comment: String!

  """A number from 1 - 5 with 1 being lowest and 5 being highest"""
  rating: Int!

  """Location Id"""
  locationId: String!
}

"""mutation root"""
type Mutation
  @join__type(graph: REVIEWS)
  @join__type(graph: USERS)
{
  submitReview(locationReview: LocationReviewInput!): SubmitReviewResponse @join__field(graph: REVIEWS)

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response @join__field(graph: USERS)

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user @join__field(graph: USERS)

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """upsert condition"""
    on_conflict: user_on_conflict

    """the row to be inserted"""
    object: user_insert_input!
  ): user @join__field(graph: USERS)

  """
  insert data into the table: "user"
  """
  insert_user(
    """upsert condition"""
    on_conflict: user_on_conflict

    """the rows to be inserted"""
    objects: [user_insert_input!]!
  ): user_mutation_response @join__field(graph: USERS)

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response @join__field(graph: USERS)

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response] @join__field(graph: USERS)

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input
    pk_columns: user_pk_columns_input!
  ): user @join__field(graph: USERS)
}

"""column ordering options"""
enum order_by
  @join__type(graph: USERS)
{
  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type Product
  @join__type(graph: PRODUCTS, key: "id")
{
  id: ID!
  title: String!
  description: String
  price: Int!
  category: Category!
  userId: String!
  user: user
}

type Query
  @join__type(graph: LOCATIONS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
  @join__type(graph: USERS)
{
  """
  The full list of locations presented by the Interplanetary Space Tourism department
  """
  locations: [Location!]! @join__field(graph: LOCATIONS)

  """The details of a specific location"""
  location(id: ID!): Location @join__field(graph: LOCATIONS)
  product(id: ID!): Product @join__field(graph: PRODUCTS)

  """The three latest reviews submitted for FlyBy's locations"""
  latestReviews: [Review!]! @join__field(graph: REVIEWS)

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """filter the rows returned"""
    where: user_bool_exp

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """distinct select on columns"""
    distinct_on: [user_select_column!]
  ): user_aggregate! @join__field(graph: USERS)

  """
  fetch data from the table: "user"
  """
  user(
    """filter the rows returned"""
    where: user_bool_exp

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """distinct select on columns"""
    distinct_on: [user_select_column!]
  ): [user!]! @join__field(graph: USERS)

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user @join__field(graph: USERS)
}

type Review
  @join__type(graph: REVIEWS)
{
  id: ID!

  """Written text"""
  comment: String

  """A number from 1 - 5 with 1 being lowest and 5 being highest"""
  rating: Int

  """The location the review is about"""
  location: Location
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp
  @join__type(graph: USERS)
{
  _eq: String
  _gt: String
  _gte: String
  _in: [String!]
  _is_null: Boolean
  _lt: String
  _lte: String
  _neq: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String

  """does the column match the given pattern"""
  _like: String
}

type SubmitReviewResponse
  @join__type(graph: REVIEWS)
{
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Indicates whether the mutation was successful"""
  success: Boolean!

  """Human-readable message for the UI"""
  message: String!

  """Newly created review"""
  locationReview: Review
}

type Subscription
  @join__type(graph: USERS)
{
  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """filter the rows returned"""
    where: user_bool_exp

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """distinct select on columns"""
    distinct_on: [user_select_column!]
  ): user_aggregate!

  """
  fetch data from the table in a streaming manner : "user"
  """
  user_stream(
    """filter the rows returned"""
    where: user_bool_exp

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """maximum number of rows returned in a single batch"""
    batch_size: Int!
  ): [user!]!

  """
  fetch data from the table: "user"
  """
  user(
    """filter the rows returned"""
    where: user_bool_exp

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """distinct select on columns"""
    distinct_on: [user_select_column!]
  ): [user!]!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

"""
columns and relationships of "user"
"""
type user
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: USERS, key: "id")
{
  id: Int!
  name: String! @join__field(graph: USERS)
}

"""
aggregated selection of "user"
"""
type user_aggregate
  @join__type(graph: USERS)
{
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields
  @join__type(graph: USERS)
{
  avg: user_avg_fields
  count(distinct: Boolean, columns: [user_select_column!]): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp
  @join__type(graph: USERS)
{
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint
  @join__type(graph: USERS)
{
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input
  @join__type(graph: USERS)
{
  id: Int
}

"""
input type for inserting data into table "user"
"""
input user_insert_input
  @join__type(graph: USERS)
{
  id: Int
  name: String
}

"""aggregate max on columns"""
type user_max_fields
  @join__type(graph: USERS)
{
  id: Int
  name: String
}

"""aggregate min on columns"""
type user_min_fields
  @join__type(graph: USERS)
{
  id: Int
  name: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response
  @join__type(graph: USERS)
{
  """data from the rows affected by the mutation"""
  returning: [user!]!

  """number of rows affected by the mutation"""
  affected_rows: Int!
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict
  @join__type(graph: USERS)
{
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by
  @join__type(graph: USERS)
{
  id: order_by
  name: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input
  @join__type(graph: USERS)
{
  id: Int!
}

"""
select columns of table "user"
"""
enum user_select_column
  @join__type(graph: USERS)
{
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "user"
"""
input user_set_input
  @join__type(graph: USERS)
{
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type user_stddev_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input
  @join__type(graph: USERS)
{
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input
  @join__type(graph: USERS)
{
  id: Int
  name: String
}

"""aggregate sum on columns"""
type user_sum_fields
  @join__type(graph: USERS)
{
  id: Int
}

"""
update columns of table "user"
"""
enum user_update_column
  @join__type(graph: USERS)
{
  """column name"""
  id

  """column name"""
  name
}

input user_updates
  @join__type(graph: USERS)
{
  where: user_bool_exp!

  """increments the numeric columns with given value of the filtered values"""
  _inc: user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input
}

"""aggregate var_pop on columns"""
type user_var_pop_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields
  @join__type(graph: USERS)
{
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields
  @join__type(graph: USERS)
{
  id: Float
}